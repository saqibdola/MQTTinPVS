
%% PVS Version 6.0 - International Allegro CL Enterprise Edition 9.0 [Linux (x86)] (Jan 14, 2013 3:16)
%% 9.0 [Linux (x86)] (Jan 14, 2013 3:16)
$$$mqqt.pvs
MQQT[T: TYPE]: THEORY
 BEGIN

  Time: TYPE = nat

  Data: TYPE+

  t: VAR Time

  N: posnat = 8

  i: VAR below[N]

  MH: TYPE =
        [# M: {bvec: bvec[N] | FORALL (i: below[N]): bvec(i) = FALSE},
           D: sequence[Data],
           T: sequence[Time] #]

  C, S, DT, T1, T2, T3: VAR MH

  <: (strict_order?[sequence[Time]])

  >: (strict_order?[sequence[Time]]) =
      LAMBDA (s1, s2: sequence[Time]): s2 < s1

  Teq(C, S): bool = T(C) = T(S)

  Tle(C, S): bool = T(C) < T(S)

  Deq(C, S): bool = D(C) = D(S)

  Dneq(C, S): bool = D(C) /= D(S)

  Send(C, S): bool = M(C) = M(S) & D(C) = D(S) & T(C) < T(S)

  L1: LEMMA Deq(T1, T2) & Deq(T2, T3) => Deq(T1, T3)

  L2: LEMMA Send(T1, T2) & Send(T2, T3) => Send(T1, T3)

  L3: LEMMA Teq(T1, T2) & Teq(T2, T3) => Teq(T1, T3)

  L4: LEMMA Tle(T1, T2) & Tle(T2, T3) => Tle(T1, T3)

 seq: var sequence[T];
 
 x,n: var nat;

 suffix(seq, n): sequence[T]  = (LAMBDA x:seq(x+n))

 next(DT): MH = DT WITH [D:=(suffix(DT`D, 1)),
                         T:=(suffix(DT`T, 1))]

  con_est(C, S): bool = C`M ^ 4 = TRUE & S`M ^ 5 = TRUE

  Qos0(C, S): bool = con_est(C, S) & C`M ^1^2 = S`M ^1^2 = FALSE & Send(C, S)

  %Qos3(C, S): bool = Send(C, S)

  Theorem1: THEOREM Qos0(C, S) => Deq(C, S) & Tle(C, S)  & Tle(S, next(S))

  Timer(C, S)(t): RECURSIVE bool =
    IF t = 0 THEN Send(C, S) & C`M ^ 3 = TRUE ELSE Timer(C, S)(t - 1) ENDIF
     MEASURE t

  Lemma1: LEMMA Timer(C, S)(t) => Deq(C, S) & Tle(C, S)

  Qos1(C, S)(t):  INDUCTIVE bool =
           con_est(C, S) & Send(C, S) & S`M ^ 6 = TRUE
         & S`M ^ 1 = C`M ^ 1 = TRUE
         & (C`M ^ 6 = FALSE => Timer(C, S)(t) & C`M ^ 6 = TRUE)

  Qos2(C, S)(t):  INDUCTIVE bool =
           con_est(C, S) & Send(C, S) & S`M ^ 4 ^ 6 = TRUE
         & C`M ^ 5 ^ 6 = TRUE & S`M ^ 4 ^ 5 ^ 6 = TRUE
         & S`M ^ 2 = C`M ^ 2 = TRUE
         & (C`M ^ 6 = FALSE => Timer(C, S)(t) & C`M ^ 6 = TRUE)

  Theorem2: THEOREM Qos1(C, S)(t) => Deq(C, S) & Tle(C, S) & 
     Tle(S,next(C))

  Theorem3: THEOREM Qos2(C, S)(t) => Deq(C, S) & Tle(C, S)

  Lemma2: LEMMA C = S => Send(C, S)

  Theorem4: THEOREM Qos2(C, S)(t) => Qos1(C, S)(t)
 END MQQT

$$$mqqt.prf
(MQQT
 (lessp_TCC1 0
  (lessp_TCC1-1 nil 3743509717
   ("" (inst 1 "lambda (x, y: sequence[Time]): false")
    (("" (grind) nil nil)) nil)
   ((irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (FALSE const-decl "bool" booleans nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil MQQT nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (greaterp_TCC1 0
  (greaterp_TCC1-1 nil 3743509717
   ("" (expand "strict_order?")
    (("" (typepred "<")
      (("" (expand "strict_order?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "irreflexive?") (("1" (propax) nil nil)) nil)
             ("2" (expand "transitive?")
              (("2" (skeep)
                (("2" (inst -4 "z" "y" "x") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "(strict_order?[sequence[Time]])" MQQT nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil MQQT nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil))
   nil))
 (L1 0
  (L1-1 nil 3739529122
   ("" (skosimp) (("" (expand "Deq") (("" (assert) nil nil)) nil)) nil)
   ((Deq const-decl "bool" MQQT nil)) shostak))
 (L2 0
  (L2-1 nil 3739529142
   ("" (skosimp)
    (("" (expand "Send")
      (("" (flatten)
        (("" (split)
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (typepred "<")
            (("3" (expand "strict_order?")
              (("3" (expand "irreflexive?")
                (("3" (flatten)
                  (("3" (inst?)
                    (("3" (expand "transitive?")
                      (("3" (inst -1 "T(T1!1)" "T(T2!1)" "T(T3!1)")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "(strict_order?[sequence[Time]])" MQQT nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil MQQT nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (irreflexive? const-decl "bool" relations nil)
    (Data nonempty-type-decl nil MQQT nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N const-decl "posnat" MQQT nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FALSE const-decl "bool" booleans nil)
    (MH type-eq-decl nil MQQT nil)
    (transitive? const-decl "bool" relations nil)
    (Send const-decl "bool" MQQT nil))
   shostak))
 (L3 0
  (L3-1 nil 3743509604
   ("" (skosimp) (("" (expand "Teq") (("" (assert) nil nil)) nil)) nil)
   ((Teq const-decl "bool" MQQT nil)) shostak))
 (L4 0
  (L4-1 nil 3743509786
   ("" (skeep)
    (("" (expand "Tle")
      (("" (typepred "<")
        (("" (expand "strict_order?")
          (("" (flatten)
            (("" (expand "transitive?")
              (("" (inst -2 "T(T1)" "T(T2)" "T(T3)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tle const-decl "bool" MQQT nil)
    (transitive? const-decl "bool" relations nil)
    (MH type-eq-decl nil MQQT nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N const-decl "posnat" MQQT nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (Data nonempty-type-decl nil MQQT nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Time type-eq-decl nil MQQT nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_order? const-decl "bool" orders nil)
    (< const-decl "(strict_order?[sequence[Time]])" MQQT nil))
   shostak))
 (con_est_TCC1 0
  (con_est_TCC1-1 nil 3739029413 ("" (subtype-tcc) nil nil)
   ((N const-decl "posnat" MQQT nil)) nil))
 (con_est_TCC2 0
  (con_est_TCC2-1 nil 3739029413 ("" (subtype-tcc) nil nil)
   ((^ const-decl "bit" bv nil) (N const-decl "posnat" MQQT nil)) nil))
 (Qos0_TCC1 0
  (Qos0_TCC1-1 nil 3755127246 ("" (subtype-tcc) nil nil) nil nil))
 (Qos0_TCC2 0
  (Qos0_TCC2-1 nil 3755127246 ("" (subtype-tcc) nil nil) nil nil))
 (Qos0_TCC3 0
  (Qos0_TCC3-1 nil 3755127246 ("" (subtype-tcc) nil nil) nil nil))
 (Theorem1 0
  (Theorem1-1 nil 3739619124
   ("" (skosimp)
    (("" (expand "Qos0")
      (("" (expand "con_est")
        (("" (expand "Send")
          (("" (expand "b2n")
            (("" (expand "Deq")
              (("" (expand "Tle")
                (("" (expand "next")
                  (("" (assert)
                    (("" (flatten)
                      (("" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (lift-if) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Qos0 const-decl "bool" MQQT nil) (Send const-decl "bool" MQQT nil)
    (Deq const-decl "bool" MQQT nil) (next const-decl "MH" MQQT nil)
    (Tle const-decl "bool" MQQT nil) (b2n const-decl "nbit" bit nil)
    (con_est const-decl "bool" MQQT nil))
   shostak))
 (Timer_TCC1 0
  (Timer_TCC1-1 nil 3739164625 ("" (subtype-tcc) nil nil)
   ((Send const-decl "bool" MQQT nil) (N const-decl "posnat" MQQT nil))
   nil))
 (Timer_TCC2 0
  (Timer_TCC2-1 nil 3739164625 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Time type-eq-decl nil MQQT nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Timer_TCC3 0
  (Timer_TCC3-1 nil 3739164625 ("" (termination-tcc) nil nil) nil nil))
 (Lemma1 0
  (Lemma1-1 nil 3739165341
   ("" (induct "t")
    (("1" (skosimp)
      (("1" (expand "Timer")
        (("1" (expand "Send")
          (("1" (expand "Deq")
            (("1" (expand "Tle")
              (("1" (flatten)
                (("1" (split)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst -1 "C!1" "S!1")
        (("2" (assert)
          (("2" (expand "Timer")
            (("2" (lift-if)
              (("2" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (Time type-eq-decl nil MQQT nil)
    (Data nonempty-type-decl nil MQQT nil)
    (sequence type-eq-decl nil sequences nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N const-decl "posnat" MQQT nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FALSE const-decl "bool" booleans nil)
    (MH type-eq-decl nil MQQT nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Timer def-decl "bool" MQQT nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Deq const-decl "bool" MQQT nil) (Tle const-decl "bool" MQQT nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Send const-decl "bool" MQQT nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "bit" bv nil))
   shostak))
 (Qos1_TCC1 0
  (Qos1_TCC1-1 nil 3738992961 ("" (subtype-tcc) nil nil)
   ((Send const-decl "bool" MQQT nil) (^ const-decl "bit" bv nil)
    (con_est const-decl "bool" MQQT nil)
    (N const-decl "posnat" MQQT nil))
   nil))
 (Qos2_TCC1 0
  (Qos2_TCC1-1 nil 3738992961 ("" (subtype-tcc) nil nil)
   ((Send const-decl "bool" MQQT nil) (^ const-decl "bit" bv nil)
    (con_est const-decl "bool" MQQT nil))
   nil))
 (Qos2_TCC2 0
  (Qos2_TCC2-1 nil 3738992961 ("" (subtype-tcc) nil nil)
   ((^ const-decl "bit" bv nil)
    (^ const-decl "real" exponentiation nil)
    (b2n const-decl "nbit" bit nil) (Send const-decl "bool" MQQT nil)
    (con_est const-decl "bool" MQQT nil)
    (N const-decl "posnat" MQQT nil))
   nil))
 (Qos2_TCC3 0
  (Qos2_TCC3-1 nil 3743564415 ("" (subtype-tcc) nil nil)
   ((^ const-decl "bit" bv nil)
    (^ const-decl "real" exponentiation nil)
    (b2n const-decl "nbit" bit nil) (Send const-decl "bool" MQQT nil)
    (con_est const-decl "bool" MQQT nil))
   nil))
 (Qos2_TCC4 0
  (Qos2_TCC4-1 nil 3743564415 ("" (subtype-tcc) nil nil)
   ((^ const-decl "bit" bv nil)
    (^ const-decl "real" exponentiation nil)
    (b2n const-decl "nbit" bit nil) (Send const-decl "bool" MQQT nil)
    (con_est const-decl "bool" MQQT nil))
   nil))
 (Qos2_TCC5 0
  (Qos2_TCC5-1 nil 3743564415 ("" (subtype-tcc) nil nil)
   ((^ const-decl "bit" bv nil)
    (^ const-decl "real" exponentiation nil)
    (b2n const-decl "nbit" bit nil) (Send const-decl "bool" MQQT nil)
    (con_est const-decl "bool" MQQT nil))
   nil))
 (Qos2_TCC6 0
  (Qos2_TCC6-1 nil 3755056723 ("" (subtype-tcc) nil nil)
   ((^ const-decl "bit" bv nil)
    (^ const-decl "real" exponentiation nil)
    (b2n const-decl "nbit" bit nil) (Send const-decl "bool" MQQT nil)
    (con_est const-decl "bool" MQQT nil)
    (N const-decl "posnat" MQQT nil))
   nil))
 (Theorem2 0
  (Theorem2-1 nil 3739619530
   ("" (skosimp)
    (("" (expand "Qos1")
      (("" (expand "Deq")
        (("" (expand "Tle")
          (("" (expand "con_est")
            (("" (expand "Send")
              (("" (use "Lemma1")
                (("" (flatten)
                  (("" (split)
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Deq const-decl "bool" MQQT nil)
    (con_est const-decl "bool" MQQT nil)
    (Lemma1 formula-decl nil MQQT nil) (MH type-eq-decl nil MQQT nil)
    (Time type-eq-decl nil MQQT nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N const-decl "posnat" MQQT nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil MQQT nil)
    (Send const-decl "bool" MQQT nil) (Tle const-decl "bool" MQQT nil)
    (Qos1 inductive-decl "bool" MQQT nil))
   shostak))
 (Theorem3 0
  (Theorem3-1 nil 3739690918
   ("" (skosimp)
    (("" (expand "Qos2")
      (("" (expand "Deq")
        (("" (expand "Tle")
          (("" (expand "con_est")
            (("" (expand "Send")
              (("" (expand "b2n")
                (("" (use "Lemma1")
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Deq const-decl "bool" MQQT nil)
    (con_est const-decl "bool" MQQT nil)
    (b2n const-decl "nbit" bit nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (Data nonempty-type-decl nil MQQT nil)
    (sequence type-eq-decl nil sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N const-decl "posnat" MQQT nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FALSE const-decl "bool" booleans nil)
    (Time type-eq-decl nil MQQT nil) (MH type-eq-decl nil MQQT nil)
    (Lemma1 formula-decl nil MQQT nil)
    (Send const-decl "bool" MQQT nil) (Tle const-decl "bool" MQQT nil)
    (Qos2 inductive-decl "bool" MQQT nil))
   shostak))
 (Lemma2 0
  (no "no" 3743511696
   ("" (skosimp)
    (("" (expand "Send")
      (("" (typepred "<")
        (("" (expand "strict_order?")
          (("" (flatten)
            (("" (expand "irreflexive?")
              (("" (inst?)
                (("" (expand "transitive?")
                  (("" (inst?)
                    (("" (inst?)
                      (("" (assert) (("" (postpone) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (m "" 3743511644
   ("" (skosimp)
    (("" (expand "Send")
      (("" (typepred "<")
        (("" (expand "strict_order?")
          (("" (flatten)
            (("" (expand "irreflexive?")
              (("" (inst?)
                (("" (expand "transitive?")
                  (("" (inst?)
                    (("" (inst?)
                      (("" (assert)
                        (("" (grind) (("" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (Lemma2-1 nil 3739187063
   ("" (skosimp)
    (("" (expand "Send")
      (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((Send const-decl "bool" MQQT nil)) shostak))
 (Theorem4 0
  (Theorem4-1 nil 3739620126
   ("" (induct "t")
    (("1" (skosimp)
      (("1" (expand "Qos2")
        (("1" (expand "Qos1")
          (("1" (expand "con_est")
            (("1" (expand "Send")
              (("1" (expand "Timer")
                (("1" (expand "b2n")
                  (("1" (flatten)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) nil nil) ("4" (assert) nil nil)
                         ("5" (assert) nil nil) ("6" (assert) nil nil)
                         ("7" (assert) nil nil) ("8" (assert) nil nil)
                         ("9" (assert) nil nil) ("10" (assert) nil nil)
                         ("11" (assert) nil nil)
                         ("12" (assert) nil nil)
                         ("13" (assert) nil nil)
                         ("14" (assert) nil nil)
                         ("15" (assert) nil nil)
                         ("16" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst -1 "C!1" "S!1")
        (("2" (expand "Qos2")
          (("2" (expand "Qos1")
            (("2" (expand "con_est")
              (("2" (expand "Send")
                (("2" (expand "b2n")
                  (("2" (expand "Timer")
                    (("2" (flatten)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil)
                           ("4" (assert) nil nil)
                           ("5" (assert) nil nil)
                           ("6" (assert) nil nil)
                           ("7" (assert) nil nil)
                           ("8" (assert) nil nil)
                           ("9" (assert) nil nil)
                           ("10" (assert) nil nil)
                           ("11" (assert) nil nil)
                           ("12" (assert) nil nil)
                           ("13" (assert) nil nil)
                           ("14" (assert) nil nil)
                           ("15" (assert) nil nil)
                           ("16" (assert) nil nil)
                           ("17" (assert) nil nil)
                           ("18" (assert) nil nil)
                           ("19" (assert) nil nil)
                           ("20" (assert) nil nil)
                           ("21" (assert) nil nil)
                           ("22" (assert) nil nil)
                           ("23" (assert) nil nil)
                           ("24" (assert) nil nil)
                           ("25" (assert) nil nil)
                           ("26" (assert) nil nil)
                           ("27" (assert) nil nil)
                           ("28" (assert) nil nil)
                           ("29" (assert) nil nil)
                           ("30" (assert) nil nil)
                           ("31" (assert) nil nil)
                           ("32" (assert) nil nil)
                           ("33" (assert) nil nil)
                           ("34" (assert) nil nil)
                           ("35" (assert) nil nil)
                           ("36" (assert) nil nil)
                           ("37" (assert) nil nil)
                           ("38" (assert) nil nil)
                           ("39" (assert) nil nil)
                           ("40" (assert) nil nil)
                           ("41" (assert) nil nil)
                           ("42" (assert) nil nil)
                           ("43" (assert) nil nil)
                           ("44" (assert) nil nil)
                           ("45" (assert) nil nil)
                           ("46" (assert) nil nil)
                           ("47" (assert) nil nil)
                           ("48" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (Time type-eq-decl nil MQQT nil)
    (Data nonempty-type-decl nil MQQT nil)
    (sequence type-eq-decl nil sequences nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N const-decl "posnat" MQQT nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FALSE const-decl "bool" booleans nil)
    (MH type-eq-decl nil MQQT nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Qos2 inductive-decl "bool" MQQT nil)
    (Qos1 inductive-decl "bool" MQQT nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (con_est const-decl "bool" MQQT nil)
    (Timer def-decl "bool" MQQT nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (b2n const-decl "nbit" bit nil) (Send const-decl "bool" MQQT nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak)))

